#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'shellwords'
require 'yaml'

def convert_bool(str)
    case str.downcase
    when 'yes', 'true'
        true
    when 'no', 'false'
        false
    end
end

config = {
    'cluttex-path' => nil,
    'input' => nil,

    'engine' => nil,
    'output' => nil,
    'fresh' => false,
    'max-iterations' => 3,
    'change-directory' => false,
    'watch' => false,
    'color' => 'auto',
    'includeonly' => nil,
    'make-depends' => nil,
    'tex-option' => [],
    'dvipdfmx-option' => [],
    'verbose' => false,

    'makeindex' => nil,
    'bibtex' => nil,
    'biber' => nil,
    'makeglossaries' => nil,

    'shell-escape' => true,
    'shell-restricted' => false,
    'synctex' => nil,
    'file-line-error' => true,
    'halt-on-error' => true,
    'interaction' => 'nonstopmode',
    'jobname' => nil,
    'fmt' => nil,
    'output-directory' => nil,
    'output-format' => 'pdf'
}

config_file = ['houcluttex.yml', 'houcluttex.yaml', 'houcluttex_config.yml', 'houcluttex_config.yaml', 'houcluttexrc', '.houcluttexrc'].find{|e| File.exist?(e)}

# parse command-line options

argv = ARGV.dup
config_by_args = {}
remain_args = []

until argv.empty?
    arg = argv.shift
    if arg == '--'
        remain_args += argv
        argv = []
    elsif arg.start_with?('--')
        m = arg.match(/\A--([^=]+)(=(.*))?\z/)
        case m[1]
        when 'fresh', 'change-directory', 'watch', 'verbose', 'shell-escape', 'shell-restricted', 'file-line-error', 'halt-on-error'
            config_by_args[m[1]] = true
        when 'no-change-directory', 'no-shell-escape', 'no-file-line-error', 'no-halt-on-error'
            config_by_args[m[1][3..-1]] = false
        when 'tex-options', 'dvipdfmx-options'
            config_by_args[m[1][0..-2]] ||= []
            config_by_args[m[1][0..-2]] += Shellwords.split(m[3] || argv.shift)
        when 'tex-option', 'dvipdfmx-option'
            config_by_args[m[1]] ||= []
            config_by_args[m[1]] << (m[3] || argv.shift)
        when 'includeonly'
            config_by_args[m[1]] = (m[3] || argv.shift).split(',')
        when 'input'
            raise 'cannot use `--input` option in command-line'
        when 'config'
            config_file = m[3] || argv.shift
        else
            config_by_args[m[1]] = m[3] || argv.shift
        end
    elsif arg.start_with?('-')
        case arg
        when '-e'
            config_by_args['engine'] = argv.shift
        when '-o'
            config_by_args['output'] = argv.shift
        when '-V'
            config_by_args['verbose'] = true
        else
            warn "option `#{arg}` is ignored"
        end
    else
        remain_args << arg
    end
end

# load yaml
config.merge!(YAML.load_file(config_file)) if config_file

# decide input file
raise 'multiple input files' if remain_args.size >= 2
config['input'] = remain_args.first unless remain_args.empty?
raise 'no input file' if config['input'].nil?

# parse magic comments

loop do
    raise "input file `#{config['input']}` does not exist" unless File.exist?(config['input'])

    root_file = nil
    File.foreach(config['input']) do |line|
        next if line.strip.empty?
        break unless line[0] == '%'
        m = line.match(/^%\s*!TEX (\S+)\s*=\s*(.*?)\s*$/)
        next unless m
        key = m[1].tr('_-', '').downcase
        value = m[2]
        case key
        when 'root'
            root_file = value
        when 'engine', 'synctex', 'jobname', 'makeindex', 'bibtex'
            config[key] = value
        when 'program'
            config['engine'] = value
        when 'format', 'outputformat'
            config['output-format'] = value
        when 'outputdirectory'
            config['output-directory'] = value
        when 'enablesynctex'
            value = convert_bool(value)
            raise 'magic option `enableSynctex` must be boolean' if value.nil?
            config['synctex'] = value ? (config['synctex'] || 1) : nil
        when 'enableshellescape'
            value = convert_bool(value)
            raise 'magic option `enableShellEscape` must be boolean' if value.nil?
            config['shell-escape'] = value
        else
            warn "magic comment `#{m[1]}` is ignored"
        end
    end
    break if root_file.nil? || config['input'] == root_file
    config['input'] = root_file
end

# merge config
config.merge!(config_by_args)

# specify command
config['cluttex-path'] ||= 'cluttex'
`type #{config['cluttex-path']} 2>&1`
raise "command `#{config['cluttex-path']}` not found" unless $?.success?

if config['verbose']
    warn 'ClutTeX options:'
    config.each do |k, v|
        warn "  #{k}: #{v.inspect}"
    end
end

# generate command

cmd_args = []

config.each do |k, v|
    case k
    when 'cluttex-path', 'input'
        # ignore
    when 'tex-option', 'dvipdfmx-option'
        v.each{|e| cmd_args << "--#{k}=#{e}"}
    when 'includeonly'
        cmd_args << (v.is_a?(Array) ? "--#{k}=#{v.join(',')}" : "--#{k}=#{v}") if v
    when 'fresh', 'watch', 'verbose', 'shell-restricted'
        cmd_args << "--#{k}" if v
    when 'change-directory', 'shell-escape', 'file-line-error', 'halt-on-error'
        cmd_args << (v ? "--#{k}" : "--no-#{k}")
    else
        cmd_args << "--#{k}=#{v}" unless v.nil?
    end
end

cmd_args << '--'
cmd_args << config['input']

FileUtils.mkdir_p(config['output-directory']) if config['output-directory']

system(config['cluttex-path'], *cmd_args)
